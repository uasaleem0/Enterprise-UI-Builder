# Forge Agent Manager
# Manages .agent/ folder system for project-specific AI context

function Initialize-AgentFolder {
    param(
        [string]$ProjectPath,
        [string]$ProjectName
    )

    $agentPath = Join-Path $ProjectPath ".agent"

    # Skip if already exists
    if (Test-Path $agentPath) {
        return
    }

    # Create structure
    New-Item -ItemType Directory -Path $agentPath -Force | Out-Null
    New-Item -ItemType Directory -Path (Join-Path $agentPath "tasks") -Force | Out-Null
    New-Item -ItemType Directory -Path (Join-Path $agentPath "system") -Force | Out-Null
    New-Item -ItemType Directory -Path (Join-Path $agentPath "sops") -Force | Out-Null

    # Generate README.md
    $readmeContent = @"
# $ProjectName

## Overview
[Project description will be populated from PRD]

## Project Status
- Phase: PRD Creation
- Confidence: 0%
- Next: Complete PRD to 95% confidence

## Key Documents
- PRD: ../prd.md
- IA: (pending)
- Design System: (pending)

## Instructions for AI
1. Read this README for project overview
2. Check ../prd.md for detailed requirements
3. As project grows, check .agent/system/ for architecture
4. After complex integrations, document in .agent/sops/

## Development Principles
- Follow PRD requirements strictly
- Maintain consistency with established patterns
- Document complex integrations as SOPs
- Update this README as project evolves

---
*Auto-generated by Forge on $(Get-Date -Format 'yyyy-MM-dd')*
"@

    Set-Content -Path (Join-Path $agentPath "README.md") -Value $readmeContent
    Write-Host "[OK] Created .agent/ folder structure" -ForegroundColor Green
}

function Update-AgentReadme {
    param(
        [string]$ProjectPath,
        [hashtable]$State
    )

    $agentPath = Join-Path $ProjectPath ".agent"
    $readmePath = Join-Path $agentPath "README.md"

    if (-not (Test-Path $readmePath)) {
        return
    }

    # Read PRD for problem statement
    $prdPath = Join-Path $ProjectPath "prd.md"
    $problemStatement = "No problem statement found"

    if (Test-Path $prdPath) {
        $prdContent = Get-Content $prdPath -Raw
        if ($prdContent -match '(?s)## Problem Statement\s*(.*?)(?=##|\z)') {
            $problemStatement = $matches[1].Trim()
        }
    }

    # Update README with actual content
    $readmeContent = @"
# $($State.project_name)

## Overview
$problemStatement

## Tech Stack
$(if ($State.tech_stack) { $State.tech_stack -join ', ' } else { '(pending)' })

## Project Status
- Phase: $(if ($State.ia_confidence -gt 0) { 'IA Complete' } else { 'PRD Complete' })
- Confidence: $($State.confidence)%
- Next: $(if ($State.confidence -lt 95) { 'Complete PRD to 95%' } elseif ($State.ia_confidence -eq 0) { 'Import IA' } else { 'Begin implementation' })

## Key Documents
- PRD: ../prd.md
- IA: $(if (Test-Path (Join-Path $ProjectPath "ia")) { '../ia/*.md' } else { '(pending)' })
- Design System: (pending)

## Instructions for AI
1. Read this README for project overview
2. Check ../prd.md for detailed requirements
3. Check .agent/system/ for architecture (if IA imported)
4. After complex integrations, document in .agent/sops/

## Development Principles
- Follow PRD requirements strictly
- Maintain consistency with established patterns
- Document complex integrations as SOPs
- Update this README as project evolves

---
*Updated by Forge on $(Get-Date -Format 'yyyy-MM-dd')*
"@

    Set-Content -Path $readmePath -Value $readmeContent
}

function Update-AgentArchitecture {
    param(
        [string]$ProjectPath,
        [hashtable]$IAData
    )

    $systemPath = Join-Path $ProjectPath ".agent" "system"
    $archFile = Join-Path $systemPath "project-architecture.md"

    $content = @"
# Project Architecture

## Sitemap (from IA)
``````
$($IAData.Sitemap)
``````

## Pages
$($IAData.Pages -join "`n")

## Components (from IA)
$($IAData.Components -join "`n")

## Navigation Structure
$($IAData.Navigation)

## User Flows
$($IAData.Flows -join "`n`n")

## Notes
- This file is auto-generated from IA
- Update via 'forge import-ia' command
- For implementation details, create SOPs in ../sops/

---
*Auto-generated from IA on $(Get-Date -Format 'yyyy-MM-dd')*
"@

    Set-Content -Path $archFile -Value $content
    Write-Host "[OK] Updated .agent/system/project-architecture.md" -ForegroundColor Green
}

function New-AgentSOP {
    param(
        [string]$ProjectPath,
        [string]$SOPName,
        [hashtable]$Context,
        [int]$ComplexityScore
    )

    $sopsPath = Join-Path $ProjectPath ".agent" "sops"
    $sopFile = Join-Path $sopsPath "$SOPName.md"

    # Skip if already exists
    if (Test-Path $sopFile) {
        return
    }

    $content = @"
# $SOPName SOP

## When to Use
$($Context.WhenToUse)

## Setup
$($Context.Setup -join "`n")

## Pattern (Copy-Paste Ready)
``````$($Context.Language)
$($Context.CodePattern)
``````

## Common Mistakes (AVOID THESE)
$($Context.CommonMistakes -join "`n")

## Related Docs
$($Context.RelatedDocs -join "`n")

---
*Created on $(Get-Date -Format 'yyyy-MM-dd') (Complexity Score: $ComplexityScore)*
"@

    Set-Content -Path $sopFile -Value $content
    Write-Host "[OK] Created SOP: $SOPName.md (complexity: $ComplexityScore)" -ForegroundColor Cyan
}

function Get-ComplexityScore {
    param([hashtable]$Context)

    $score = 0

    # High-value signals
    if ($Context.NewPackageInstalled) { $score += 3 }
    if ($Context.EnvironmentVariables) { $score += 3 }
    if ($Context.ExternalAPIUsed) { $score += 3 }
    if ($Context.AsyncComplexity -gt 2) { $score += 2 }
    if ($Context.ErrorHandlingAdded) { $score += 2 }
    if ($Context.AuthenticationLogic) { $score += 3 }
    if ($Context.DatabaseSchemaChange) { $score += 2 }

    # Low-value signals (noise reduction)
    if ($Context.StandardCRUD) { $score -= 2 }
    if ($Context.SimpleComponent) { $score -= 1 }

    return $score
}

function Show-AgentDocs {
    param([string]$ProjectPath)

    $agentPath = Join-Path $ProjectPath ".agent"

    if (-not (Test-Path $agentPath)) {
        Write-Host "[ERROR] No .agent/ folder found" -ForegroundColor Red
        return
    }

    Write-Host "`n.agent/ Documentation" -ForegroundColor Cyan
    Write-Host "-------------------------------------------------------------" -ForegroundColor DarkGray

    # README
    $readme = Join-Path $agentPath "README.md"
    if (Test-Path $readme) {
        $lineCount = (Get-Content $readme).Count
        Write-Host "  [FILE] README.md ($lineCount lines)" -ForegroundColor Gray
    }

    # System docs
    $systemPath = Join-Path $agentPath "system"
    if (Test-Path $systemPath) {
        $systemFiles = Get-ChildItem $systemPath -Filter "*.md" -ErrorAction SilentlyContinue
        if ($systemFiles) {
            Write-Host "`n  [FOLDER] system/" -ForegroundColor Yellow
            foreach ($file in $systemFiles) {
                $lineCount = (Get-Content $file.FullName).Count
                Write-Host "    [FILE] $($file.Name) ($lineCount lines)" -ForegroundColor Gray
            }
        }
    }

    # SOPs
    $sopsPath = Join-Path $agentPath "sops"
    if (Test-Path $sopsPath) {
        $sopFiles = Get-ChildItem $sopsPath -Filter "*.md" -ErrorAction SilentlyContinue
        if ($sopFiles) {
            Write-Host "`n  [FOLDER] sops/" -ForegroundColor Yellow
            foreach ($file in $sopFiles) {
                $lineCount = (Get-Content $file.FullName).Count
                Write-Host "    [SOP] $($file.Name) ($lineCount lines)" -ForegroundColor Gray
            }
        }
    }

    Write-Host ""
}

function Test-AgentConflicts {
    param([string]$ProjectPath)

    $conflicts = @()
    $agentPath = Join-Path $ProjectPath ".agent"

    if (-not (Test-Path $agentPath)) {
        return $conflicts
    }

    # Check 1: IA updated but architecture not refreshed
    $systemPath = Join-Path $agentPath "system"
    $archFile = Join-Path $systemPath "project-architecture.md"
    $iaPath = Join-Path $ProjectPath "ia"
    $iaSitemap = Join-Path $iaPath "sitemap.md"

    if ((Test-Path $archFile) -and (Test-Path $iaSitemap)) {
        $archMtime = (Get-Item $archFile).LastWriteTime
        $iaMtime = (Get-Item $iaSitemap).LastWriteTime

        if ($iaMtime -gt $archMtime) {
            $conflicts += "⚠️  IA updated but .agent/system/project-architecture.md not refreshed"
        }
    }

    return $conflicts
}

function Show-AgentHealth {
    param([string]$ProjectPath)

    Write-Host "`n.agent/ Health Check" -ForegroundColor Cyan
    Write-Host "-------------------------------------------------------------" -ForegroundColor DarkGray

    $conflicts = Test-AgentConflicts -ProjectPath $ProjectPath

    if ($conflicts.Count -eq 0) {
        Write-Host "  [OK] No conflicts detected" -ForegroundColor Green
    } else {
        foreach ($conflict in $conflicts) {
            Write-Host "  $conflict" -ForegroundColor Yellow
        }
        Write-Host "`n  Run 'forge import-ia' to refresh architecture docs" -ForegroundColor Cyan
    }

    Write-Host ""
}

# Module functions are dot-sourced, so Export-ModuleMember is not needed
# All functions are automatically available when script is dot-sourced

